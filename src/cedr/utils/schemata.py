import time
import schematax
import numpy as np
from typing import List
from itertools import combinations, groupby
from collections import namedtuple

class Schemata():
    def __init__(self) -> None:
        self.schemata_list =  []
        self.schemata_set = set()

    def all_equal(self, iterable):
        g = groupby(iterable)
        return next(g, True) and not next(g, False)


    def find_schematas(
        self, 
        population: List[str], 
        max_depth: int,
        min_order: int
    ):
        for depth in range(2, max_depth+1):
            # Unpack tuple dynamically so we can handle arbitrary depth
            for individual_1, *individual_x in combinations(population, depth):
                grouping = [individual_1] + [*individual_x]


                schemata = ''.join([m if self.all_equal([m] + [*n]) else '*' 
                            for m, *n in zip(*grouping)])   

                if schemata.count('*') <= len(population[0]) - min_order:
                    self.schemata_list.append(schemata)


            self.schemata_set.update(self.schemata_list)

        self.schemata_set = sorted(self.schemata_set, reverse =True)



if __name__ == "__main__":
    schemata = Schemata()

    individuals = [
        'C3D4A2D 3F9FA6C 18447DB 1130832 F20DA36 8347DD1 94BA676 3DACBBE 16BE88B', 
        '291F8C3 2466756 7C584D6 08C4EA2 849792B BB15B3F 4D18D19 82BC83F E8E4DFA',
        '291F8C3 D79A2EA 8343DE1 18C4E22 809792B BB35B3F 4D18D59 E4D5F68 B0DC36C',
        '7453FA1 C4F8448 7D489EE 98F1D45 F20DA36 8247DD1 94BA676 3DACBBE 16BE89B',
        '7CBB3C4 B765AD1 0844793 0130832 9CB50DA 9831B42 0E27AFB 35DF3C1 90899E4',
        '391F8C3 D7982EA 8343FE1 E71FAF2 66C4172 8343DD1 0F18FFF C13E2CA 6041BAC',
        '4FB0077 0A383AD BB42D4B 5768767 895EF8A BDBCAF5 CC2AAF8 ADBFB9F 145713B',
        '0777EA1 3E4A2FC 6F21270 9DDCC7F 8E8501C 875F686 27B448A 35DF3C1 90C99E4',
        '669DD34 2466716 7C404DE 18C0AA2 849792B B935B3F 4D98D59 82BC89F E8E4DFA',
        '669DD34 2466716 7C504D6 18C0AA2 849792B BB35B3F 4D18D59 BB7A449 83205B2',
        '669DD34 2466716 7C504D6 18C4EA2 849792B BB35B3F 0E27AAF 3AC5A6A C3205B2',
        'D2D9905 9A7162F 7D489EE 98F1D45 D20DA36 8343DD1 94BE676 3CACBBE 83205B2',
        '3FB5667 3E4A2FC 6F212F0 8DDCC7F 8E8521C 9831A62 4D18D51 82BC8BF E8A4DFA',
        'A201B24 98C3083 C3CFA34 70516A8 0E08031 1144A7B 616896E D78A91F 8B297C6',
        '669DD34 2466716 7C504D6 9DDCC7F 8E8521C 9831B62 0E27AAF 3AE5AFE 83205B2',
        '1122CBB EA58769 7A8885F F473460 D0DCD16 307AEE4 CC2AAF8 ADBFB9F 145713B',
        'F20C195 7740423 06134DE A8225A2 414AD4B BC4736A 0E27AAF 3AC5AEE 83205B2',
        '291B8C3 D7902EA 8343DE0 E71FAF2 67329DC E646ECE 79157E5 AA4BD16 730B3F0',
        '09ADCF9 1C4C53F 1CE9B79 BB9146F AC3FCC9 03834BC 6E550A2 6FB65F8 4D44915',
        '669DD34 2466716 5C504D6 70516A8 0E08034 1044A7B 616A96E D78B91F 8B297C6',
        'A203B66 9883083 9470400 E177341 F5A7AE0 12B7158 8260AE6 94F3540 A06F7E3',
        '4FB0077 0A383AD AB42D4B 576A767 895EF8A BC1E8BD 9324A48 633643A 482EFB8',
        'E1889FD 18619B4 9476F92 7CBBDD3 7482AF3 9831B42 0E27AAF 3AC5AEE 83205B2',
        '6695D34 2466716 9476FB2 E177341 F5A7AE0 12B7158 8360AEE 94F3D40 E06F7E3',
        'C3D4A2D 3F9FA6C 18447D3 1130832 9C350DA 875F68E 27B448A 35DF3C1 C1A09CD',
        'D2D9805 1A71627 7D489EE 98F1D45 D20DA36 1144A7B 614A96E D78B91F 8A29786',
        '291F8C3 1A719B4 9276FB2 E177341 F5A7AE0 12B6158 8360AEE 94F3540 A06F7E3',
        '62994F3 38949C5 82B5529 576876F 67321DC E646ECE 79157E5 AA4BD16 6B0D8FB',
        '291F8D3 D7902EA 8343DF1 E71FAF2 849792B BB15B3F 4D18D59 A2BC8BF E8E4DFA',
        '62994F3 38949C5 82B5529 AAE593E 9A02521 50B6BF7 DB6524A 7634553 3041FA9',
        '4A0033B DD48CF0 B9D7D2E 978C81C 895EF8A BDBCAF5 7458F2F 71528EF 0CB4CED',
        'D2D9805 1A7162F E663044 AAE593E 9802521 50B6BF7 DB6D24A 7634553 3041FA9',
        '906FE83 BF44364 3E4FCA2 7CBBDD3 7482AD3 7567EBF 0207405 93D52D6 3041FA9',
        'A8D1D61 2E1C85E B1E3DD0 68EE03A 1CBE85B 52B099A D995A89 75528EF 0CB4CED',
        'E201B26 98C3083 B470400 CCD93C2 0E0803C 1144A7B 614A96E 6336438 482EFB8',
        'E011013 48B9745 E66304C AAE593E 9802521 50B6BF7 DB7D24A 7634553 A3339F1',
        '4FB0077 0A383AD AB42D4B 5768767 04C4F5E 37672D8 F560997 B13DBD7 9444598',
        'A8D1D61 2E1C85E B1E3D90 EAF5C06 A9CBAE9 307AEE4 CC2AAF8 ADBFB9F 145713B',
        'D3D9805 187162F 3E4FCA2 78BBDD3 7482AD3 7567EBF 0207405 93D52D6 A3339F1',
        '3FB5667 3E4A2FC 6F21270 9DDCC7F 8E8521C 9831B62 0E27AAF 71528EF 0CB4CED',
        '8D2AE21 1C0E53F 14E9B79 BB9146F A83FCC9 6C8270E 0E27AAF 3AC5AEE 83205B2',
        '7CBA3C4 B765AF1 08447D3 0930832 9CB50DA 1AB7158 8360AEE 94F3540 A06F7E3',
        '300D126 3E4E2FC 7C504D6 18C4AA2 849790B BB14B3F 4D18D59 82B48BF E8E4DFA',
        '72DA76D 25EEE9B 7C504D6 18C0AA2 849792B BB35B3F 4D18D59 BB7A449 4C2D305',
        'D2D9805 0A7162F 7DC89EE 98F1D45 D20DAB6 E646ECE 71155E1 AA4BD06 6B0D8FB',
        '8D29E23 CF1C23D 073335B DCD91C2 1E0803C 1144A7B 614A96E D78991F 8A297C6',
        'E12D95D D55E6D3 8343DE1 E71FAF2 6732DDC E646ECE 69157E5 AA4BD16 50E4A89',
        '9F51390 1D4C53F 1CE9B79 BB9146F AC3FCC9 8347DD1 94BA676 3DACBBE 16BE88B',
        '3FB5665 3E4A2FC 6F21270 9DDCC7F 8E8521C 9839B62 0E27AAF 3AC5AFE 4C2D305',
        '9F51390 1C4C53F 3E6EB57 70516A8 0E08034 1104A7B 616A96E D78B91F 8B296C6',
        'E011013 48B9747 E663044 574876F 897EF8A BDBCAE5 7C58D2F 75528EF 1CB4CED',
        'C188DF8 1A719B4 9476FB2 DCD93C2 AD73A94 A8CA3D5 FDDB216 27F3975 50E4A81',
        '9F51390 EF1C23D 0733379 E73FAF2 67329DC E646FCE 79157E5 AA4BD16 51E4A81',
        '9F51390 EF1C23D 0733379 5E1F3C1 DF4C0E1 F720D9C 3995B59 C22CC74 60619BC',
        '72DA76D E907D0C C9C1297 3336E92 D425A6A A77C78C F1F6C31 91D52D6 AB339F1',
        '4FB0077 0A383AD AB42D4B 5768767 04C4F5E 37672D8 F560997 B13DBC7 9444598',
        '916FEC3 BF4C360 CF22B8D C943523 6DF4A0F CA5CDDA 0638448 ECD5E68 B0DC36C',
        '669DD34 2466F16 7C504D4 18C0AA2 849792B BB35B3F 79157E5 AA4BD16 50E4A81',
        '07776A1 6D862EB F2F06C9 93B73B9 EFFB0DA ED25F49 0E27AAF BAC5AEE 8320DB2',
        'E188DFC 1A759B4 9476F92 7CBBDD3 7482AF3 7567EBF 1010E10 52A9394 6061BBC',
        '450AFFD 24A3A4A 3E6EB57 18C4EA2 849792B BB35B3F 4D1AD59 E4D5F68 B0DC36C',
        '8D2BE21 CF1C23D 073335B 5E1F3C1 04C4F5E 37672D8 F560997 B13DBD7 9444598',
        'A8D1D61 2E1C85E B1E3D90 68EE032 1CBE85B 50B099A D995A89 C5BDAEB 482EFB8',
        '4FE2543 CF3C23D 073325B 5E1F3C1 8CC88BF 6E0215D 374E21E F9C8EFD 8D461DA',
        'E76AE16 E90FD0C C1C1297 3336E93 717684C 5254562 592D255 ACB8552 C7DD5CB',
        '0777EA1 EA5A769 7A8885F F473460 D0DCD16 307AEE4 CE2AAF8 ACB8552 C7DD7CB',
        '391F8D3 D7902EA B543472 EAF5C06 A98BAE9 307AEE4 CC2A2F8 ADBFB9F 145713B',
        '8A4D2E2 2466756 7C504D6 18C4EA2 849792B BB15B3F 0E27AAF 3AC5AFE 83205B2',
        'A201B26 98C3083 B470400 DCD93C2 0E0803C 1144A7B 27B458A 35DF3C1 90C99E4',
        '916FEC3 BF44364 7D489EE 98F1D45 D20DA36 8343DD1 94BE676 3CACBBE A06F7E3',
        '666AE1E E907D0C C1C1297 3336E92 D425E6A 12B7158 8240AEE 94F3440 16BE883',
        '9F53390 1C4C53F 1CE9B79 E51FAF2 67329DC E646ECE 79157E5 AA4BD16 6B0D8FB',
        '8B4D2E2 D7902EA 8343CE1 E71FAF2 67329DC E646ECE 79157E5 AA4BD16 6B0F8FB',
        '43D4A2D 3F9FA6C 18447D3 1130832 9C350DA A77C78C F1F6D39 91D52D6 AB739F1',
        'E011013 48B9747 E663044 AAE593E 9802521 50B6BD7 DB6D24A 7634543 482EFB8',
        '291F8D3 D7902EA 8343DE1 E71FAF2 67329DC E646ECE 4D18559 BB7A449 4C2D305',
        '9F51390 1C5C53F 1CE9B79 BB9146F AC3FC49 03834BC 1010E10 52A9394 6061BBC',
        'E011013 48B9747 7D489EE 98E1D45 D20DA36 8343DD1 94BE676 3CACBBE A06F7EB',
        '5ACDE5E D55E6DB B543472 EAF5C06 A9CBAC9 BC1E8BD 9324A48 6336438 3041FA9',
        'A201B66 98C3083 9470400 5CD93C2 AD73AD4 307AEE4 CC0AAF8 ADBFB9F 145713B',
        'D20C19D 3740423 0E134DE A8225A2 D425E62 12B7158 8260AEE 94F3440 16AE883',
        '8D2AE21 1C0E53F F2F06C9 91B73B9 EFFB0DA ED25F49 0E27AAF 3AC5AEE 83205B2',
        'C188CF8 1A719B4 7C504D6 18C4EA2 849F92B BB35B3F 4C18D59 E4D5F6C B0DC36C',
        '09ADCF9 ACE37E2 9594073 38DBA01 757684C 5256562 27B448A 35DF3C1 90C99E4',
        '907FE83 BF44364 3E4FEA2 7CBBDD3 7482AD3 7567EBF 0207415 F2DA30C E1A09CD',
        '4A0033B DD48CF0 B957D2E 9F8C81C 8CC88BF 6E0215D 374E21E F9C8EFD 8DC61DA',
        'E12D95D D55E6D3 B543472 68EE03A 1CBE85B 52B099A D995A89 C5BDAEB 85D3FC6',
        '9F51390 2466716 7C504D6 18C0AA2 849792B BB35B3F 4D18D59 BF7A449 4C2D305',
        '8B4D2E2 A466756 6F21230 9DFCC7F 8E8521C 875F686 27B448A 35DF3C1 90E99E4',
        '300D126 EA5A769 7A8885F F473460 D0DCD16 307AEE4 CC3AAFC ADBFB9F 145713B',
        '916FEC3 BFC4364 7D489AE 98F1D45 9C350DA 875F68F 27B448A 35DF3C1 90C99E4',
        '906FE83 BD44364 3E4FCA2 DCD93C2 0E0803C 1144A6B 714A96E D78B91F 8A297C6',
        '300D126 7E4A2FC 6F21270 9DDCC7F 8E8521C 875F686 27B448A 3AC5AEE 83205B2',
        'D2D9805 1A7162F 7D489EE 98F1D45 D20D8B6 5A54562 592D255 ACB8552 C7DD4CB',
        '8D2AE21 1C0E53F 1DE9B79 BB9546F A83FCC9 6C8270E 8D0A8EA E250EEC 8D461DA',
        '916FEC3 BF44364 7D489EE DCD93C2 AD73AD4 A8CA3D5 FDDB216 27DB975 50E4A81',
        'E76AE12 E90FD0C C9C1297 3336E93 414AC4B BC4736A 1030E10 52A9B94 6061BBC',
        '8D2BE21 CF1C23D 073235A 5E1F3C1 8CC88BF 6E0215D 374E21E F9C8FFD 2F473D7',
        'E76AE16 48B9747 E662040 AAE593E 9002521 50B6BF7 DB6D24A 7634553 3041FA9',
        'F20C195 3740423 06134DE A8225A2 414AC4B 107AEE4 CC2AAF9 ADB7B9F 145713B',
        '62990F3 38949C5 82B5529 566A76F 897EF8A BDBCAE5 8D0A8EA E250EAC 2F473D7',
        'A201B24 98C1083 C3CFA34 8B5ECE0 0BDFE5B E646ECE 79157E5 AA4BD16 50E4A81',
        'E76AE16 E90FD0C C1C1297 3336E93 D425A6A A77C78D F1F6D39 91D52D6 AB339F1',
        '5ACDE5E D75E6DB B543472 EAF5C06 A9CBAC9 BC1E8BD 9324A48 6336438 50E4A81',
        'E011013 E907D0C C1C1297 3336E92 D4A5A6A A77C78C F1F6D39 91D52D6 AB339F1',
        'E12D95D D55E6D3 B543472 EAF5C06 A9CAAE9 A8CA3D5 FDDF216 27FBD75 50E4A81',
        '62994F3 7894945 82B5529 98F1D45 D20DA36 8343DD1 94BE676 3CACBBE A06F7E3',
        'D2D9805 1A7162F B95FD2E 978C81C 04C4F5E 3767258 F160997 B13DBD6 9444598',
        'A8D1D61 2E1C85E B1E3D90 68EE03A 1CBE85B 52B099A D995A89 C5BDAEB 456ECCE',
        'D0D9805 5A7962F 7D489EE 576876F 897EF8A BDB4AE5 7458F2F 755A8EF 0CB4CED',
        '4A0033B DC48CF0 B957D2E 978C81C 04C4F5E 37672D8 F560997 E250EAC 2F47BD7',
        'A201B24 99C3083 7F21270 9DDCC7F 8E8521C 9831B62 0E27AAF 3AC5AFE 83205B2',
        'D2D9805 1A7162F 6D489EE 98F1D45 D20DAB6 A0CA3D5 FDDB216 27FB975 54E4A81',
        '5ACDE5E D55E6DB B543472 EAF5C06 A9CBAC9 BDBCAF5 7458F2F 71528EF 0CF4CED',
        '1122CBB 6D862EB F2F06C9 91B73B9 EFFB0DA ED25F49 1010E10 53A9B94 6061BBC',
        '291F8C3 D7902EA 8343DE1 BB9146F AC3FCC9 03834BC EE550A2 6FB65F8 4D44915',
        '4FE2543 B1264EE 16E34C1 1E0EC6E 737684C 5254562 592D255 ADBFB9F 145713B',
    ]

    individuals = [individual.replace(' ','') for individual in individuals]


    individuals.sort()

    start = time.perf_counter()

    schemata = Schemata()
    schemata.find_schematas(individuals, 2, 50)
    # schemata.find_schemata_depthwise(individuals, 2)
    [print(schemata) for schemata in  schemata.schemata_set]

    finish = time.perf_counter()
    elapsed = finish - start
    print(f"{elapsed=}")
    print("\n\n")
























